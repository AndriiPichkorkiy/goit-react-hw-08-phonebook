{"version":3,"file":"static/js/756.3adadd89.chunk.js","mappings":"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","sources":["components/ContactForm/Form.js","components/ContactForm/Inputs.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.js","redux/filter/selectors.js","components/Filter/Filter.jsx","components/ContactList/ContactList.styled.js","styled/Button.styled.js","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/Container.js","pages/ContactsBook.jsx"],"sourcesContent":["const { default: styled } = require('styled-components');\r\n\r\nconst Form = styled.form`\r\n  min-width: 200px;\r\n  max-width: 200px;\r\n\r\n  /* padding: 1rem; */\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n\r\n  \r\n`;\r\n\r\nexport default Form;\r\n","export const InputName = ({ value, onChange, id }) => {\r\n    return <input\r\n        type=\"text\"\r\n        name=\"name\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n        required\r\n        value={value}\r\n        onChange={onChange}\r\n        placeholder=\"add Name\"\r\n        id={id}\r\n    />\r\n}\r\n\r\nexport const InputPhoneNumber = ({ value, onChange, id }) => {\r\n    return <input\r\n        type=\"tel\"\r\n        name=\"number\"\r\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n        required\r\n        value={value}\r\n        onChange={onChange}\r\n        placeholder=\"add Number\"\r\n        id={id}\r\n    />\r\n}","import { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Form from './Form';\r\nimport { InputPhoneNumber, InputName } from './Inputs';\r\n\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { addContact } from '../../redux/contacts/contacts-operations'\r\n\r\nexport function ContactForm({ showMessage }) {\r\n    const [getName, setName] = useState('');\r\n    const [getNumber, setNumber] = useState('');\r\n    //redux\r\n    const dispatch = useDispatch();\r\n\r\n    const handleChange = (event) => {\r\n        const { name, value } = event.currentTarget;\r\n\r\n        name === 'name' ? setName(value) : setNumber(value);\r\n    }\r\n\r\n    const validateForm = function (event, showMessage) {\r\n        event.preventDefault();\r\n        const name = getName\r\n        const number = getNumber\r\n\r\n        //check inputs\r\n        if (!name || !number) return showMessage('Fill in all filds plz');\r\n\r\n        //if everything ok - continue\r\n        const newContact = { name, number };\r\n\r\n        //continue\r\n        dispatch(addContact(newContact));\r\n\r\n        //reset form\r\n        setName('')\r\n        setNumber('')\r\n    }\r\n\r\n    return <div>\r\n        <h1>PhoneBook</h1>\r\n\r\n        <Form onSubmit={(event) => { validateForm(event, showMessage) }}>\r\n            <label htmlFor='name'>\r\n                Name\r\n            </label>\r\n            <InputName value={getName} onChange={handleChange} id={'name'} />\r\n\r\n            <label htmlFor='number'>\r\n                Number\r\n            </label>\r\n            <InputPhoneNumber value={getNumber} onChange={handleChange} id={'number'} />\r\n\r\n            <button type=\"submit\">Add contact</button>\r\n        </Form>\r\n    </div>\r\n\r\n}\r\n\r\nContactForm.propTypes = {\r\n    showMessage: PropTypes.func.isRequired,\r\n};","const { default: styled } = require('styled-components');\r\n\r\nconst FilterBlock = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin: 1rem;\r\n\r\n  margin: 0 auto;\r\n`;\r\n\r\nexport default FilterBlock;\r\n","export const getFiltredList = ({ contacts: { items: contacts }, filter }) => {\r\n  if (filter) {\r\n    const subString = filter.toLocaleUpperCase();\r\n    const key = isNaN(+filter.charAt(0)) ? 'name' : 'number';\r\n    return contacts.filter(el =>\r\n      el[key].toLocaleUpperCase().includes(subString)\r\n    );\r\n  } else {\r\n    return contacts;\r\n  }\r\n};\r\n\r\nexport const getFilter = ({ filter }) => filter;\r\n","import FilterBlock from './Filter.styled';\r\n\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { setFilter } from 'redux/filter/reducer-filter'\r\nimport { getFilter } from 'redux/filter/selectors';\r\n\r\n\r\nconst Filter = function () {\r\n    //redux\r\n    // const filter = useSelector(state => state.filter);\r\n    const filter = useSelector(getFilter);\r\n    const dispatch = useDispatch();\r\n\r\n    const onFilterChange = (event) => {\r\n        const { value } = event.currentTarget\r\n        dispatch(setFilter(value));\r\n    }\r\n\r\n    return <FilterBlock>\r\n        <h2>Contacts</h2>\r\n\r\n        <label htmlFor='filter'>Find contacts by name or number</label>\r\n        <input type=\"text\" name=\"filter\"\r\n            id=\"filter\" onChange={onFilterChange} placeholder=\"serch\" value={filter} />\r\n    </FilterBlock>\r\n}\r\n\r\nexport { Filter }","const { default: styled } = require('styled-components');\r\n\r\nconst ContactListUl = styled.ul`\r\n  width: 24rem;\r\n  list-style: none;\r\n  padding-left: 0;\r\n  & > li {\r\n    padding: 0.4rem;\r\n    display: flex;\r\n    justify-content: space-between;\r\n\r\n    transition-duration: 750ms;\r\n      transition-property: background-color;\r\n\r\n    & > button {\r\n      margin-top: 0;\r\n    }\r\n\r\n    &:hover {\r\n      transition-duration: 250ms;\r\n      background-color: #5D5179;\r\n    }\r\n\r\n    &> span {\r\n      width: 33%;\r\n    }\r\n  }\r\n\r\n  \r\n`;\r\n\r\nexport default ContactListUl;\r\n","import styled, { css } from 'styled-components';\r\n\r\nconst ButtonStyled = styled.button`\r\n  ${props => {\r\n    switch (props.type) {\r\n      case 'delete':\r\n        return css`\r\n          &:hover {\r\n            background: #dc8181;\r\n          }\r\n        `;\r\n      case 'change':\r\n        return css`\r\n          &:hover {\r\n            background: var(--title-color);\r\n          }\r\n        `;\r\n      default:\r\n        break;\r\n    }\r\n  }}\r\n`;\r\n\r\nexport default ButtonStyled;\r\n","import PropTypes from 'prop-types';\r\nimport { memo } from 'react';\r\nimport { useCallback } from 'react';\r\n\r\nimport { changeContact, removeContact } from '../../redux/contacts/contacts-operations'\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useState } from 'react';\r\nimport { InputName, InputPhoneNumber } from 'components/ContactForm/Inputs';\r\nimport ButtonStyled from 'styled/Button.styled';\r\n\r\nconst ContactListItem = ({ id, name: propName, number: propNumber }) => {\r\n    const [isBeingChanging, setIsBeingChanging] = useState(false);\r\n    const [name, setName] = useState(propName);\r\n    const [number, setNumber] = useState(propNumber);\r\n\r\n    const handleChange = (event) => {\r\n        const { name, value } = event.currentTarget;\r\n\r\n        name === 'name' ? setName(value) : setNumber(value);\r\n    }\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onRemoveContact = useCallback((e) => {\r\n        e.preventDefault();\r\n        const id = e.target.form.dataset.contactid;\r\n        dispatch(removeContact(id));\r\n    }, [dispatch])\r\n\r\n    const onChangeContact = (e) => {\r\n        e.preventDefault();\r\n        setIsBeingChanging(true);\r\n    }\r\n\r\n    const onFinishContact = (e) => {\r\n        e.preventDefault();\r\n        setIsBeingChanging(false);\r\n        const id = e.target.form.dataset.contactid;\r\n        dispatch(changeContact({ id, name, number }));\r\n    }\r\n\r\n    return <li>\r\n        <form data-contactid={id}>\r\n            <span>\r\n                {isBeingChanging\r\n                    ? <InputName value={name} onChange={handleChange} />\r\n                    : name}:\r\n            </span>\r\n            <span>\r\n                {isBeingChanging ?\r\n                    <InputPhoneNumber value={number} onChange={handleChange} />\r\n                    : number}\r\n            </span>\r\n            <div>{isBeingChanging ? <ButtonStyled onClick={onFinishContact} type=\"change\">Finish</ButtonStyled> : <ButtonStyled onClick={onChangeContact} type=\"change\">Change</ButtonStyled>}\r\n                <ButtonStyled type=\"delete\" onClick={onRemoveContact}>Remove</ButtonStyled>\r\n            </div>\r\n\r\n        </form >\r\n    </li >\r\n}\r\n\r\nContactListItem.propTypes = {\r\n    id: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    number: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default memo(ContactListItem);","import ContactListUl from './ContactList.styled';\r\nimport { ContactListItem } from 'components/ContactListItem';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getFiltredList } from 'redux/filter/selectors';\r\n\r\nimport { useEffect } from 'react';\r\nimport { fetchContacts } from 'redux/contacts/contacts-operations';\r\n\r\n\r\n\r\nconst ContactList = () => {\r\n    const contacts = useSelector(getFiltredList);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchContacts());\r\n    }, [dispatch]);\r\n\r\n    const markup = contacts.map(({ id, name, number }) => {\r\n        return <ContactListItem key={id} id={id} name={name} number={number} />\r\n    })\r\n\r\n    return <ContactListUl>\r\n        {markup.length ? markup : 'Phonebook is empty.'}\r\n    </ContactListUl>\r\n\r\n}\r\n\r\nexport { ContactList };","const { default: styled } = require('styled-components');\r\n\r\nconst Section = styled.div`\r\n  display: flex;\r\n  justify-content: space-around;\r\n`;\r\n\r\nconst Container = styled.div`\r\n  padding: 0 2rem;\r\n  height: 75vh;\r\n  /* width: 17.5rem; */\r\n\r\n  background-color: #aaaaaaaa;\r\n  margin: 0 auto;\r\n  box-shadow: #aaaaaa 0px 0px 16px 16px;\r\n`;\r\n\r\nexport { Container, Section };\r\n","import React from 'react';\r\nimport { ContactForm } from '../components/ContactForm';\r\nimport { Filter } from '../components/Filter';\r\nimport { ContactList } from '../components/ContactList';\r\nimport { Container, Section } from '../components/Container.js';\r\n\r\nexport function ContactsBook({ showMessage }) {\r\n\r\n    return (\r\n        <Section>\r\n            <Container>\r\n                <ContactForm showMessage={showMessage} />\r\n            </Container>\r\n            <Container>\r\n                <Filter />\r\n                <ContactList />\r\n            </Container>\r\n        </Section>\r\n    );\r\n    // }\r\n};\r\n"],"names":["require","default","form","InputName","value","onChange","id","type","name","pattern","title","required","placeholder","InputPhoneNumber","ContactForm","showMessage","useState","getName","setName","getNumber","setNumber","dispatch","useDispatch","handleChange","event","currentTarget","onSubmit","preventDefault","number","newContact","addContact","validateForm","htmlFor","div","getFiltredList","contacts","items","filter","subString","toLocaleUpperCase","key","isNaN","charAt","el","includes","getFilter","Filter","useSelector","setFilter","ul","styled","props","css","ContactListItem","propName","propNumber","isBeingChanging","setIsBeingChanging","onRemoveContact","useCallback","e","target","dataset","contactid","removeContact","onClick","changeContact","memo","ContactList","useEffect","fetchContacts","markup","map","length","Section","Container","ContactsBook"],"sourceRoot":""}