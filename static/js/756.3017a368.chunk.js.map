{"version":3,"file":"static/js/756.3017a368.chunk.js","mappings":"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","sources":["components/ContactForm/Form.js","components/ContactForm/Inputs.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.js","redux/filter/selectors.js","components/Filter/Filter.jsx","components/ContactList/ContactList.styled.js","styled/Button.styled.js","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/Container.js","pages/ContactsBook.jsx"],"sourcesContent":["const { default: styled } = require('styled-components');\n\nconst Form = styled.form`\n  min-width: 200px;\n  max-width: 200px;\n\n  /* padding: 1rem; */\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  \n`;\n\nexport default Form;\n","export const InputName = ({ value, onChange, id }) => {\n    return <input\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        value={value}\n        onChange={onChange}\n        placeholder=\"add Name\"\n        id={id}\n    />\n}\n\nexport const InputPhoneNumber = ({ value, onChange, id }) => {\n    return <input\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n        value={value}\n        onChange={onChange}\n        placeholder=\"add Number\"\n        id={id}\n    />\n}","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Form from './Form';\nimport { InputPhoneNumber, InputName } from './Inputs';\n\nimport { useDispatch } from \"react-redux\";\n\nimport { addContact } from '../../redux/contacts/contacts-operations'\n\nexport function ContactForm({ showMessage }) {\n    const [getName, setName] = useState('');\n    const [getNumber, setNumber] = useState('');\n    //redux\n    const dispatch = useDispatch();\n\n    const handleChange = (event) => {\n        const { name, value } = event.currentTarget;\n\n        name === 'name' ? setName(value) : setNumber(value);\n    }\n\n    const validateForm = function (event, showMessage) {\n        event.preventDefault();\n        const name = getName\n        const number = getNumber\n\n        //check inputs\n        if (!name || !number) return showMessage('Fill in all filds plz');\n\n        //if everything ok - continue\n        const newContact = { name, number };\n\n        //continue\n        dispatch(addContact(newContact));\n\n        //reset form\n        setName('')\n        setNumber('')\n    }\n\n    return <div>\n        <h1>PhoneBook</h1>\n\n        <Form onSubmit={(event) => { validateForm(event, showMessage) }}>\n            <label htmlFor='name'>\n                Name\n            </label>\n            <InputName value={getName} onChange={handleChange} id={'name'} />\n\n            <label htmlFor='number'>\n                Number\n            </label>\n            <InputPhoneNumber value={getNumber} onChange={handleChange} id={'number'} />\n\n            <button type=\"submit\">Add contact</button>\n        </Form>\n    </div>\n\n}\n\nContactForm.propTypes = {\n    showMessage: PropTypes.func.isRequired,\n};","const { default: styled } = require('styled-components');\n\nconst FilterBlock = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: 1rem;\n\n  margin: 0 auto;\n`;\n\nexport default FilterBlock;\n","export const getFiltredList = ({ contacts: { items: contacts }, filter }) => {\n  if (filter) {\n    const subString = filter.toLocaleUpperCase();\n    const key = isNaN(+filter.charAt(0)) ? 'name' : 'number';\n    return contacts.filter(el =>\n      el[key].toLocaleUpperCase().includes(subString)\n    );\n  } else {\n    return contacts;\n  }\n};\n\nexport const getFilter = ({ filter }) => filter;\n","import FilterBlock from './Filter.styled';\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setFilter } from 'redux/filter/reducer-filter'\nimport { getFilter } from 'redux/filter/selectors';\n\n\nconst Filter = function () {\n    //redux\n    // const filter = useSelector(state => state.filter);\n    const filter = useSelector(getFilter);\n    const dispatch = useDispatch();\n\n    const onFilterChange = (event) => {\n        const { value } = event.currentTarget\n        dispatch(setFilter(value));\n    }\n\n    return <FilterBlock>\n        <h2>Contacts</h2>\n\n        <label htmlFor='filter'>Find contacts by name or number</label>\n        <input type=\"text\" name=\"filter\"\n            id=\"filter\" onChange={onFilterChange} placeholder=\"serch\" value={filter} />\n    </FilterBlock>\n}\n\nexport { Filter }","const { default: styled } = require('styled-components');\n\nconst ContactListUl = styled.ul`\n  width: 24rem;\n  list-style: none;\n  padding-left: 0;\n  & > li {\n    padding: 0.4rem;\n    display: flex;\n    justify-content: space-between;\n\n    transition-duration: 750ms;\n      transition-property: background-color;\n\n    & > button {\n      margin-top: 0;\n    }\n\n    &:hover {\n      transition-duration: 250ms;\n      background-color: #5D5179;\n    }\n\n    &> span {\n      width: 33%;\n    }\n  }\n\n  \n`;\n\nexport default ContactListUl;\n","import styled, { css } from 'styled-components';\n\nconst ButtonStyled = styled.button`\n  margin-right: 16px;\n  ${props => {\n    switch (props.btnType) {\n      case 'delete':\n        return css`\n          &:hover {\n            background: #dc8181;\n          }\n        `;\n      case 'change':\n        return css`\n          &:hover {\n            background: var(--title-color);\n          }\n        `;\n      default:\n        break;\n    }\n  }}\n`;\n\nexport default ButtonStyled;\n","import PropTypes from 'prop-types';\nimport { memo } from 'react';\nimport { useCallback } from 'react';\n\nimport { changeContact, removeContact } from '../../redux/contacts/contacts-operations'\nimport { useDispatch } from \"react-redux\";\nimport { useState } from 'react';\nimport { InputName, InputPhoneNumber } from 'components/ContactForm/Inputs';\nimport ButtonStyled from 'styled/Button.styled';\n\nconst ContactListItem = ({ id, name: propName, number: propNumber }) => {\n    const [isBeingChanging, setIsBeingChanging] = useState(false);\n    const [name, setName] = useState(propName);\n    const [number, setNumber] = useState(propNumber);\n\n    const handleChange = (event) => {\n        const { name, value } = event.currentTarget;\n\n        name === 'name' ? setName(value) : setNumber(value);\n    }\n\n    const dispatch = useDispatch();\n\n    const onRemoveContact = useCallback((e) => {\n        e.preventDefault();\n        const id = e.target.form.dataset.contactid;\n        dispatch(removeContact(id));\n    }, [dispatch])\n\n    const onChangeContact = (e) => {\n        e.preventDefault();\n        setIsBeingChanging(true);\n    }\n\n    const onFinishContact = (e) => {\n        e.preventDefault();\n\n        setIsBeingChanging(false);\n        const id = e.target.dataset.contactid;\n        dispatch(changeContact({ id, name, number }));\n    }\n\n\n    return <li>\n        <form data-contactid={id} onSubmit={onFinishContact}>\n            <span>\n                {isBeingChanging\n                    ? <InputName value={name} onChange={handleChange} />\n                    : name}:\n            </span>\n            <span>\n                {isBeingChanging ?\n                    <InputPhoneNumber value={number} onChange={handleChange} />\n                    : number}\n            </span>\n            <div>{isBeingChanging ? <ButtonStyled btnType=\"change\" type=\"submit\">Finish</ButtonStyled> : <ButtonStyled btnType=\"change\" onClick={onChangeContact}>Change</ButtonStyled>}\n                <ButtonStyled btnType=\"delete\" onClick={onRemoveContact}>Remove</ButtonStyled>\n            </div>\n\n        </form >\n    </li >\n}\n\nContactListItem.propTypes = {\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n};\n\nexport default memo(ContactListItem);","import ContactListUl from './ContactList.styled';\nimport { ContactListItem } from 'components/ContactListItem';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getFiltredList } from 'redux/filter/selectors';\n\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/contacts-operations';\n\n\n\nconst ContactList = () => {\n    const contacts = useSelector(getFiltredList);\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch]);\n\n    const markup = contacts.map(({ id, name, number }) => {\n        return <ContactListItem key={id} id={id} name={name} number={number} />\n    })\n\n    return <ContactListUl>\n        {markup.length ? markup : 'Phonebook is empty.'}\n    </ContactListUl>\n\n}\n\nexport { ContactList };","const { default: styled } = require('styled-components');\n\nconst Section = styled.div`\n  display: flex;\n  justify-content: space-around;\n`;\n\nconst Container = styled.div`\n  padding: 0 2rem;\n  height: 75vh;\n  /* width: 17.5rem; */\n\n  background-color: #aaaaaaaa;\n  margin: 0 auto;\n  box-shadow: #aaaaaa 0px 0px 16px 16px;\n`;\n\nexport { Container, Section };\n","import React from 'react';\nimport { ContactForm } from '../components/ContactForm';\nimport { Filter } from '../components/Filter';\nimport { ContactList } from '../components/ContactList';\nimport { Container, Section } from '../components/Container.js';\n\nexport function ContactsBook({ showMessage }) {\n\n    return (\n        <Section>\n            <Container>\n                <ContactForm showMessage={showMessage} />\n            </Container>\n            <Container>\n                <Filter />\n                <ContactList />\n            </Container>\n        </Section>\n    );\n    // }\n};\n"],"names":["require","default","form","InputName","value","onChange","id","type","name","pattern","title","required","placeholder","InputPhoneNumber","ContactForm","showMessage","useState","getName","setName","getNumber","setNumber","dispatch","useDispatch","handleChange","event","currentTarget","onSubmit","preventDefault","number","newContact","addContact","validateForm","htmlFor","div","getFiltredList","contacts","items","filter","subString","toLocaleUpperCase","key","isNaN","charAt","el","includes","getFilter","Filter","useSelector","setFilter","ul","styled","props","btnType","css","ContactListItem","propName","propNumber","isBeingChanging","setIsBeingChanging","onRemoveContact","useCallback","e","target","dataset","contactid","removeContact","changeContact","onClick","memo","ContactList","useEffect","fetchContacts","markup","map","length","Section","Container","ContactsBook"],"sourceRoot":""}